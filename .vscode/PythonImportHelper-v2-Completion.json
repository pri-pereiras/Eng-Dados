[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "BaseHook",
        "importPath": "airflow.hooks.base",
        "description": "airflow.hooks.base",
        "isExtraImport": true,
        "detail": "airflow.hooks.base",
        "documentation": {}
    },
    {
        "label": "BaseHook",
        "importPath": "airflow.hooks.base",
        "description": "airflow.hooks.base",
        "isExtraImport": true,
        "detail": "airflow.hooks.base",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "DummyOperator",
        "importPath": "airflow.operators.dummy",
        "description": "airflow.operators.dummy",
        "isExtraImport": true,
        "detail": "airflow.operators.dummy",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python",
        "description": "airflow.operators.python",
        "isExtraImport": true,
        "detail": "airflow.operators.python",
        "documentation": {}
    },
    {
        "label": "ExternalTaskSensor",
        "importPath": "airflow.sensors.external_task",
        "description": "airflow.sensors.external_task",
        "isExtraImport": true,
        "detail": "airflow.sensors.external_task",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def fetch_data():\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    return response.json()\ndef filter_data(todos):\n    return [todo['title'] for todo in todos if todo['completed']]\ndef insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def filter_data(todos):\n    return [todo['title'] for todo in todos if todo['completed']]\ndef insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",\n        user=\"airflow\",\n        password=\"airflow\"\n    )\n    cursor = conn.cursor()",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",\n        user=\"airflow\",\n        password=\"airflow\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS tb_todos (",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def fetch_data():\n    logging.info('Fetching data from https://jsonplaceholder.typicode.com/todos')\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    data = response.json()\n    logging.info('Fetched %d records', len(data))\n    return data\ndef filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]\n    logging.info('Filtered down to %d completed records', len(filtered_todos))\n    return filtered_todos\ndef insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,\n        database=connection.schema,\n        user=connection.login,\n        password=connection.password,\n        port=connection.port\n    )",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def fetch_data():\n    logging.info('Fetching data from https://jsonplaceholder.typicode.com/todos')\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    data = response.json()\n    logging.info('Fetched %d records', len(data))\n    return data\ndef filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]\n    logging.info('Filtered down to %d completed records', len(filtered_todos))\n    return filtered_todos\ndef insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,\n        database=connection.schema,\n        user=connection.login,\n        password=connection.password,\n        port=connection.port\n    )",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarCorredores",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaCorredores",
        "description": "dags.dag_DataAPI_BuscaCorredores",
        "peekOfCode": "def GetData_API_BuscarCorredores(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscaCorredores",
        "documentation": {}
    },
    {
        "label": "save_Corredores_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaCorredores",
        "description": "dags.dag_DataAPI_BuscaCorredores",
        "peekOfCode": "def save_Corredores_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_Corredores_onibus', task_ids='GetData_API_BuscarCorredores')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarCorredores.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscaCorredores",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaCorredores",
        "description": "dags.dag_DataAPI_BuscaCorredores",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das Corredores de ônibus\ndef GetData_API_BuscarCorredores(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscaCorredores",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaCorredores",
        "description": "dags.dag_DataAPI_BuscaCorredores",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das Corredores de ônibus\ndef GetData_API_BuscarCorredores(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscaCorredores",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaCorredores",
        "description": "dags.dag_DataAPI_BuscaCorredores",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscarCorredores_SaveMinIO',\n         default_args=default_args,\n         schedule_interval=\"@daily\",\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaCorredores",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarEmpresas",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaEmpresas",
        "description": "dags.dag_DataAPI_BuscaEmpresas",
        "peekOfCode": "def GetData_API_BuscarEmpresas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscaEmpresas",
        "documentation": {}
    },
    {
        "label": "save_Empresas_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaEmpresas",
        "description": "dags.dag_DataAPI_BuscaEmpresas",
        "peekOfCode": "def save_Empresas_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data_json = ti.xcom_pull(key='data_empresas_onibus', task_ids='GetData_API_BuscarEmpresas')\n    if data_json is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    # Converter o JSON para DataFrame\n    df = pd.read_json(data_json)\n    local_file = \"/tmp/DataAPI_BuscarEmpresas.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")",
        "detail": "dags.dag_DataAPI_BuscaEmpresas",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaEmpresas",
        "description": "dags.dag_DataAPI_BuscaEmpresas",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das Empresas de ônibus\ndef GetData_API_BuscarEmpresas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscaEmpresas",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaEmpresas",
        "description": "dags.dag_DataAPI_BuscaEmpresas",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das Empresas de ônibus\ndef GetData_API_BuscarEmpresas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscaEmpresas",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaEmpresas",
        "description": "dags.dag_DataAPI_BuscaEmpresas",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 0\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscarEmpresas_SaveMinIO',\n         default_args=default_args,\n         schedule_interval=\"@daily\",\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaEmpresas",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscaLinhas",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas",
        "description": "dags.dag_DataAPI_BuscaLinhas",
        "peekOfCode": "def GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscaLinhas",
        "documentation": {}
    },
    {
        "label": "save_linhas_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas",
        "description": "dags.dag_DataAPI_BuscaLinhas",
        "peekOfCode": "def save_linhas_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='GetData_API_BuscaLinhas')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscaLinhas.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscaLinhas",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas",
        "description": "dags.dag_DataAPI_BuscaLinhas",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscaLinhas",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas",
        "description": "dags.dag_DataAPI_BuscaLinhas",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscaLinhas",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas",
        "description": "dags.dag_DataAPI_BuscaLinhas",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscaLinhas_SaveMinIO',\n         default_args=default_args,\n         schedule_interval=\"@daily\",\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaLinhas",
        "documentation": {}
    },
    {
        "label": "GetData_API_garagemPositions",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "def GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',\n                                 endpoint_url=minio_endpoint,\n                                 aws_access_key_id=minio_access_key,\n                                 aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar posição de veículos em garagens para todas as combinações de empresas e linhas com prefixos 0-9\ndef GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar posição de veículos em garagens para todas as combinações de empresas e linhas com prefixos 0-9\ndef GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar posição de veículos em garagens para todas as combinações de empresas e linhas com prefixos 0-9\ndef GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "bucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar posição de veículos em garagens para todas as combinações de empresas e linhas com prefixos 0-9\ndef GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar posição de veículos em garagens para todas as combinações de empresas e linhas com prefixos 0-9\ndef GetData_API_garagemPositions(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',\n                                 endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarGaragem",
        "description": "dags.dag_DataAPI_BuscarGaragem",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\nwith DAG('Data_API_BuscarGaragemPositions_SaveMinIO', default_args=default_args, schedule_interval='*/5 * * * *', catchup=False) as dag:\n    # Tarefa de coleta de dados para todas as combinações de empresas e linhas com prefixos 0-9\n    fetch_task = PythonOperator(\n        task_id='GetData_API_garagemPositions',\n        python_callable=GetData_API_garagemPositions",
        "detail": "dags.dag_DataAPI_BuscarGaragem",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarParadas",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas",
        "description": "dags.dag_DataAPI_BuscarParadas",
        "peekOfCode": "def GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscarParadas",
        "documentation": {}
    },
    {
        "label": "save_paradas_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas",
        "description": "dags.dag_DataAPI_BuscarParadas",
        "peekOfCode": "def save_paradas_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_paradas', task_ids='GetData_API_BuscarParadas')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarParadas.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscarParadas",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas",
        "description": "dags.dag_DataAPI_BuscarParadas",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarParadas",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas",
        "description": "dags.dag_DataAPI_BuscarParadas",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscarParadas",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas",
        "description": "dags.dag_DataAPI_BuscarParadas",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\n# Definir a DAG única\nwith DAG('Data_API_BuscarParadas_SaveMinIO',\n         default_args=default_args,\n         schedule_interval=\"@daily\",\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadas",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarParadasPorCorredor",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "description": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "peekOfCode": "def GetData_API_BuscarParadasPorCorredor(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "documentation": {}
    },
    {
        "label": "save_paradasPorcorredor_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "description": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "peekOfCode": "def save_paradasPorcorredor_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_paradas_corredor', task_ids='GetData_API_BuscarParadasPorCorredor')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarParadasPorCorredor.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "description": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadasPorCorredor(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "description": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadasPorCorredor(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "description": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscarParadasPorCorredor_SaveMinIO',\n         default_args=default_args,\n         schedule_interval=\"@daily\",\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadasPorCorredor",
        "documentation": {}
    },
    {
        "label": "baixar_csv_linhas_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "def baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação\ndef autenticar(api_key):",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "def autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        return auth_response.cookies\n    else:\n        raise Exception(\"Falha na autenticação\")",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "buscar_paradas_por_linha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "def buscar_paradas_por_linha(codigo_linha, cookies):\n    search_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Parada/BuscarParadasPorLinha\"\n    response = requests.get(search_url,  params={\"codigoLinha\": codigo_linha}, cookies=cookies)\n    print(\"iniciando busca por paradas de uma linha\")\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Erro ao buscar paradas para linha {codigo_linha}: {response.text}\")\n        return []\n# Função principal para obter todas as paradas de todas as linhas e salvar em um arquivo CSV",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarParadasPorLinha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "def GetData_API_BuscarParadasPorLinha(**kwargs):\n    # Autenticação\n    cookies = autenticar(api_key)\n    # Carregar a relação de linhas a partir do CSV baixado\n    print(\"Carregando a base de linhas baixada do Minio\")\n    df_linhas = pd.read_csv(linha_csv_path)\n    # Armazenar todas as paradas de todas as linhas\n    dados_paradas = []\n    for _, linha in df_linhas.iterrows():\n        codigo_linha = linha[\"cl\"]",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "save_ParadasPorLinha_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "def save_ParadasPorLinha_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_ParadasPorLinha', task_ids='GetData_API_BuscarParadasPorLinha')\n    if data is None:\n        print(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarParadasPorLinha.csv\"\n    print(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Configurações da API e MinIO\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "bucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "linha_csv_path",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "linha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\nwith DAG(\n    'DataAPI_BuscarParadasPorLinha_SaveMinIO',\n    default_args=default_args,\n    description='DAG para buscar todas as paradas de todas as linhas a partir de um CSV no MinIO e salvar no MinIO',\n    schedule_interval='@daily',  # Executar uma vez por mês",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarPosicao",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "def GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        response = requests.get(url, cookies=auth_response.cookies)\n        if response.status_code == 200:",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "bucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao",
        "description": "dags.dag_DataAPI_BuscarPosicao",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\nwith DAG('DataAPI_BuscarPosicao_SaveMinIO', default_args=default_args, schedule_interval='*/5 * * * *', catchup=False) as dag:\n    # Tarefa de coleta de dados para a camada raw\n    fetch_task = PythonOperator(\n        task_id='GetData_API_BuscarPosicao',\n        python_callable=GetData_API_BuscarPosicao",
        "detail": "dags.dag_DataAPI_BuscarPosicao",
        "documentation": {}
    },
    {
        "label": "baixar_csv_linhas_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "def baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação\ndef autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "def autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        return auth_response.cookies\n    else:\n        raise Exception(\"Falha na autenticação\")\n# Função principal para obter previsões de chegada para cada linha",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "GetData_API_PrevisaoLinha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "def GetData_API_PrevisaoLinha(**kwargs):\n    # Autenticação\n    cookies = autenticar(api_key)\n    # Carregar a relação de linhas a partir do CSV baixado\n    print(\"Carregando a base de linhas baixada do Minio\")\n    df_linhas = pd.read_csv(linha_csv_path)\n    # Lista para consolidar os dados\n    consolidated_data = []\n    # Iterar sobre cada linha e buscar previsões\n    for _, linha in df_linhas.iterrows():",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "bucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "linha_csv_path",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "linha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG(\n    'DataAPI_BuscarPrevisaoLinha_SaveMinIO',\n    default_args=default_args,\n    description='DAG para buscar previsões de chegada de veículos para cada linha e salvar no MinIO',\n    schedule_interval='*/5 * * * *',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha",
        "documentation": {}
    },
    {
        "label": "GetData_API_PrevisaoParada",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "def GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',\n                                 endpoint_url=minio_endpoint,\n                                 aws_access_key_id=minio_access_key,\n                                 aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar previsões de chegada e consolidar as respostas válidas em um único arquivo\ndef GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar previsões de chegada e consolidar as respostas válidas em um único arquivo\ndef GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar previsões de chegada e consolidar as respostas válidas em um único arquivo\ndef GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "bucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar previsões de chegada e consolidar as respostas válidas em um único arquivo\ndef GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para buscar previsões de chegada e consolidar as respostas válidas em um único arquivo\ndef GetData_API_PrevisaoParada(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        s3_client = boto3.client('s3',\n                                 endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "description": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\nwith DAG('Data_API_BuscarPrevisaoParada_SaveMinIO', default_args=default_args, schedule_interval='*/5 * * * *', catchup=False) as dag:\n    # Tarefa de coleta de dados para todas as combinações de prefixos de parada e linha de 0 a 9\n    fetch_task = PythonOperator(\n        task_id='GetData_API_PrevisaoParada',\n        python_callable=GetData_API_PrevisaoParada",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoParada",
        "documentation": {}
    },
    {
        "label": "GetData_API_Velocidade_KMZ",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarVelocidade",
        "description": "dags.dag_DataAPI_BuscarVelocidade",
        "peekOfCode": "def GetData_API_Velocidade_KMZ(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscarVelocidade",
        "documentation": {}
    },
    {
        "label": "save_KMZ_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarVelocidade",
        "description": "dags.dag_DataAPI_BuscarVelocidade",
        "peekOfCode": "def save_KMZ_to_minio(**kwargs):\n    ti = kwargs['ti']\n    local_kmz_file = ti.xcom_pull(key='kmz_file_path', task_ids='GetData_API_Velocidade_KMZ')\n    if local_kmz_file is None:\n        logger.error(\"Nenhum arquivo KMZ encontrado no XCom.\")\n        return\n    # Configurações do MinIO\n    minio_endpoint = \"http://host.docker.internal:9050\"\n    minio_access_key = \"datalake\"\n    minio_secret_key = \"datalake\"",
        "detail": "dags.dag_DataAPI_BuscarVelocidade",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarVelocidade",
        "description": "dags.dag_DataAPI_BuscarVelocidade",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca do arquivo KMZ de Velocidade nas Vias\ndef GetData_API_Velocidade_KMZ(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarVelocidade",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarVelocidade",
        "description": "dags.dag_DataAPI_BuscarVelocidade",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca do arquivo KMZ de Velocidade nas Vias\ndef GetData_API_Velocidade_KMZ(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscarVelocidade",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarVelocidade",
        "description": "dags.dag_DataAPI_BuscarVelocidade",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 0\n}\nwith DAG('DataAPI_Velocidade_KMZ_SaveMinIO',\n         default_args=default_args,\n         schedule_interval='*/5 * * * *',\n         catchup=False) as dag:\n    # Task 1: Buscar arquivo KMZ da API",
        "detail": "dags.dag_DataAPI_BuscarVelocidade",
        "documentation": {}
    },
    {
        "label": "save_to_minio",
        "kind": 2,
        "importPath": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "description": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "peekOfCode": "def save_to_minio(**kwargs):\n    ti = kwargs['ti']\n    # Recuperar o run_id atual (se precisar garantir que está no mesmo contexto)\n    run_id = kwargs['run_id']\n    # Recuperar dados do XCom com o task_id correto e contexto correto\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='fetch_olho_vivo_data', dag_id='DataAPI_BuscaLinhas', run_id=run_id)\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    # Processar o DataFrame",
        "detail": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "description": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\ndef save_to_minio(**kwargs):\n    ti = kwargs['ti']\n    # Recuperar o run_id atual (se precisar garantir que está no mesmo contexto)\n    run_id = kwargs['run_id']\n    # Recuperar dados do XCom com o task_id correto e contexto correto\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='fetch_olho_vivo_data', dag_id='DataAPI_BuscaLinhas', run_id=run_id)\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return",
        "detail": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "description": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\nwith DAG('save_DataAPI_BuscaLinhas_to_minio',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:\n    save_task = PythonOperator(",
        "detail": "dags.dag_save_DataAPI_BuscaLinhas_to_minio",
        "documentation": {}
    },
    {
        "label": "StaticData_GTFS_toMinio",
        "kind": 2,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "def StaticData_GTFS_toMinio(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    for filename in file_list:\n        if filename == \"shapes.txt\" :\n            raw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data\"\n        # Monta a URL para download do arquivo\n        file_url = f\"{raw_base_url}/{filename}\"",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/GTFS%20SPTrans\"\n# Lista de arquivos no repositório GitHub que deseja baixar\nfile_list = [\n    \"shapes.txt\", \n    \"agency.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/GTFS%20SPTrans\"\n# Lista de arquivos no repositório GitHub que deseja baixar\nfile_list = [\n    \"shapes.txt\", \n    \"agency.txt\", \n    \"calendar.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/GTFS%20SPTrans\"\n# Lista de arquivos no repositório GitHub que deseja baixar\nfile_list = [\n    \"shapes.txt\", \n    \"agency.txt\", \n    \"calendar.txt\", \n    \"fare_attributes.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "bucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/GTFS%20SPTrans\"\n# Lista de arquivos no repositório GitHub que deseja baixar\nfile_list = [\n    \"shapes.txt\", \n    \"agency.txt\", \n    \"calendar.txt\", \n    \"fare_attributes.txt\", \n    \"fare_rules.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "raw_base_url",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "raw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/GTFS%20SPTrans\"\n# Lista de arquivos no repositório GitHub que deseja baixar\nfile_list = [\n    \"shapes.txt\", \n    \"agency.txt\", \n    \"calendar.txt\", \n    \"fare_attributes.txt\", \n    \"fare_rules.txt\", \n    \"frequencies.txt\", \n    \"routes.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "file_list",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "file_list = [\n    \"shapes.txt\", \n    \"agency.txt\", \n    \"calendar.txt\", \n    \"fare_attributes.txt\", \n    \"fare_rules.txt\", \n    \"frequencies.txt\", \n    \"routes.txt\", \n    \"stop_times.txt\", \n    \"stops.txt\", ",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_GTFS",
        "description": "dags.dag_StaticData_GTFS",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\n# Definição do DAG\nwith DAG(\n    'StaticData_GTFS_toMinio',\n    default_args=default_args,\n    description='DAG para baixar arquivos GTFS do GitHub e subir no MinIO',",
        "detail": "dags.dag_StaticData_GTFS",
        "documentation": {}
    },
    {
        "label": "download_Data_OpenStreetMap",
        "kind": 2,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "def download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:\n        with open(local_file_path, \"wb\") as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        print(f\"Arquivo baixado com sucesso: {local_file_path}\")\n    else:\n        print(f\"Erro ao baixar o arquivo: {response.status_code}\")\n# Função para enviar o arquivo para o MinIO",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "upload_file_to_minio",
        "kind": 2,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "def upload_file_to_minio():\n    s3_client = boto3.client(\n        's3',\n        endpoint_url=minio_endpoint,\n        aws_access_key_id=minio_access_key,\n        aws_secret_access_key=minio_secret_key\n    )\n    object_name = \"geodata/sudeste-latest.osm.pbf\"\n    s3_client.upload_file(local_file_path, bucket_name, object_name)\n    print(f\"Arquivo {local_file_path} enviado para o MinIO como {object_name}\")",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL do arquivo OSM\nosm_url = \"https://download.geofabrik.de/south-america/brazil/sudeste-latest.osm.pbf\"\nlocal_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL do arquivo OSM\nosm_url = \"https://download.geofabrik.de/south-america/brazil/sudeste-latest.osm.pbf\"\nlocal_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL do arquivo OSM\nosm_url = \"https://download.geofabrik.de/south-america/brazil/sudeste-latest.osm.pbf\"\nlocal_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:\n        with open(local_file_path, \"wb\") as file:",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "bucket_name = \"raw\"\n# URL do arquivo OSM\nosm_url = \"https://download.geofabrik.de/south-america/brazil/sudeste-latest.osm.pbf\"\nlocal_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:\n        with open(local_file_path, \"wb\") as file:\n            for chunk in response.iter_content(chunk_size=8192):",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "osm_url",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "osm_url = \"https://download.geofabrik.de/south-america/brazil/sudeste-latest.osm.pbf\"\nlocal_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:\n        with open(local_file_path, \"wb\") as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        print(f\"Arquivo baixado com sucesso: {local_file_path}\")",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "local_file_path",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "local_file_path = \"/tmp/sudeste-latest.osm.pbf\"\n# Função para baixar o arquivo\ndef download_Data_OpenStreetMap():\n    response = requests.get(osm_url, stream=True)\n    if response.status_code == 200:\n        with open(local_file_path, \"wb\") as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        print(f\"Arquivo baixado com sucesso: {local_file_path}\")\n    else:",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_OpenStreetMap",
        "description": "dags.dag_StaticData_OpenStreetMap",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 1,\n}\nwith DAG(\n    'StaticData_OpenStreetMap_toMinio',\n    default_args=default_args,\n    description='DAG para baixar e enviar arquivo OSM para o MinIO',\n    schedule_interval=\"@daily\",",
        "detail": "dags.dag_StaticData_OpenStreetMap",
        "documentation": {}
    },
    {
        "label": "download_all_xls_files",
        "kind": 2,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "def download_all_xls_files(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Gerar a lista de arquivos com nome e caminho corretos\n    filenames = [\n        f\"Consolidado {num_mes}-{mes}-{ano}.xls\"\n        for ano in range(2020, 2025)\n        for num_mes, mes in meses_portugues.items()",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "bucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\n# Função para baixar arquivos XLS",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "raw_base_url",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "raw_base_url = \"https://github.com/pri-pereiras/Eng-Dados/tree/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\n# Função para baixar arquivos XLS\ndef download_all_xls_files(**kwargs):\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "meses_portugues",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "meses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\n# Função para baixar arquivos XLS\ndef download_all_xls_files(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados",
        "description": "dags.dag_StaticData_PassTransportados",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Definição da DAG\nwith DAG(\n    'StaticsData_passageirosTransportados_toMinio',\n    default_args=default_args,\n    description='DAG para ingerir dados de transporte de passageiros no MinIO',",
        "detail": "dags.dag_StaticData_PassTransportados",
        "documentation": {}
    },
    {
        "label": "task_example",
        "kind": 2,
        "importPath": "dags.dag_TaskFlow",
        "description": "dags.dag_TaskFlow",
        "peekOfCode": "def task_example():\n    pass\n# Configurações padrão\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime(2024, 1, 1),\n}\n# DAG 1: Executa primeiro\nwith DAG(",
        "detail": "dags.dag_TaskFlow",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_TaskFlow",
        "description": "dags.dag_TaskFlow",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime(2024, 1, 1),\n}\n# DAG 1: Executa primeiro\nwith DAG(\n    'DataAPI_BuscaLinhas_SaveMinIO',\n    default_args=default_args,\n    schedule_interval=None,",
        "detail": "dags.dag_TaskFlow",
        "documentation": {}
    },
    {
        "label": "dag_names",
        "kind": 5,
        "importPath": "dags.dag_TaskFlow",
        "description": "dags.dag_TaskFlow",
        "peekOfCode": "dag_names = [\n    'DataAPI_BuscarCorredores_SaveMinIO',\n    'DataAPI_BuscarEmpresas_SaveMinIO',\n    'Data_API_BuscarGaragemPositions_SaveMinIO',\n    'DataAPI_BuscarParadasPorCorredor_SaveMinIO',\n    'Data_API_BuscarParadas_SaveMinIO',\n    'DataAPI_BuscarPosicao_SaveMinIO',\n    'Data_API_BuscarPrevisaoLinha_SaveMinIO',\n    'Data_API_BuscarPrevisaoParada_SaveMinIO',\n    'DataAPI_Velocidade_KMZ_SaveMinIO',",
        "detail": "dags.dag_TaskFlow",
        "documentation": {}
    },
    {
        "label": "save_to_minio",
        "kind": 2,
        "importPath": "dags.testes",
        "description": "dags.testes",
        "peekOfCode": "def save_to_minio(**kwargs):\n    ti = kwargs['ti']\n    # Recuperar o run_id atual (se precisar garantir que está no mesmo contexto)\n    run_id = kwargs['run_id']\n    # Recuperar dados do XCom com o task_id correto e contexto correto\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='fetch_olho_vivo_data', dag_id='DataAPI_BuscaLinhas', run_id=run_id)\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    # Processar o DataFrame",
        "detail": "dags.testes",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.testes",
        "description": "dags.testes",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\ndef save_to_minio(**kwargs):\n    ti = kwargs['ti']\n    # Recuperar o run_id atual (se precisar garantir que está no mesmo contexto)\n    run_id = kwargs['run_id']\n    # Recuperar dados do XCom com o task_id correto e contexto correto\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='fetch_olho_vivo_data', dag_id='DataAPI_BuscaLinhas', run_id=run_id)\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return",
        "detail": "dags.testes",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.testes",
        "description": "dags.testes",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 10, 20),\n    'retries': 1\n}\nwith DAG('save_DataAPI_BuscaLinhas_to_minio',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:\n    save_task = PythonOperator(",
        "detail": "dags.testes",
        "documentation": {}
    }
]