[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "BaseHook",
        "importPath": "airflow.hooks.base",
        "description": "airflow.hooks.base",
        "isExtraImport": true,
        "detail": "airflow.hooks.base",
        "documentation": {}
    },
    {
        "label": "BaseHook",
        "importPath": "airflow.hooks.base",
        "description": "airflow.hooks.base",
        "isExtraImport": true,
        "detail": "airflow.hooks.base",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "DAG",
        "importPath": "airflow",
        "description": "airflow",
        "isExtraImport": true,
        "detail": "airflow",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "PythonOperator",
        "importPath": "airflow.operators.python_operator",
        "description": "airflow.operators.python_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.python_operator",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "days_ago",
        "importPath": "airflow.utils.dates",
        "description": "airflow.utils.dates",
        "isExtraImport": true,
        "detail": "airflow.utils.dates",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "TriggerDagRunOperator",
        "importPath": "airflow.operators.dagrun_operator",
        "description": "airflow.operators.dagrun_operator",
        "isExtraImport": true,
        "detail": "airflow.operators.dagrun_operator",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "SparkSession",
        "importPath": "pyspark.sql",
        "description": "pyspark.sql",
        "isExtraImport": true,
        "detail": "pyspark.sql",
        "documentation": {}
    },
    {
        "label": "concat_ws",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "concat_ws",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "concat_ws",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "col",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "to_date",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "date_format",
        "importPath": "pyspark.sql.functions",
        "description": "pyspark.sql.functions",
        "isExtraImport": true,
        "detail": "pyspark.sql.functions",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def fetch_data():\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    return response.json()\ndef filter_data(todos):\n    return [todo['title'] for todo in todos if todo['completed']]\ndef insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def filter_data(todos):\n    return [todo['title'] for todo in todos if todo['completed']]\ndef insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",\n        user=\"airflow\",\n        password=\"airflow\"\n    )\n    cursor = conn.cursor()",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils",
        "description": "dags.aula_airflow.utils",
        "peekOfCode": "def insert_data(titles):\n    conn = mysql.connector.connect(\n        host=\"mysql\",\n        database=\"airflow\",\n        user=\"airflow\",\n        password=\"airflow\"\n    )\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS tb_todos (",
        "detail": "dags.aula_airflow.utils",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def fetch_data():\n    logging.info('Fetching data from https://jsonplaceholder.typicode.com/todos')\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    data = response.json()\n    logging.info('Fetched %d records', len(data))\n    return data\ndef filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]\n    logging.info('Filtered down to %d completed records', len(filtered_todos))\n    return filtered_todos\ndef insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils2",
        "description": "dags.aula_airflow.utils2",
        "peekOfCode": "def insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,\n        database=connection.schema,\n        user=connection.login,\n        password=connection.password,\n        port=connection.port\n    )",
        "detail": "dags.aula_airflow.utils2",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def fetch_data():\n    logging.info('Fetching data from https://jsonplaceholder.typicode.com/todos')\n    response = requests.get('https://jsonplaceholder.typicode.com/todos')\n    response.raise_for_status()\n    data = response.json()\n    logging.info('Fetched %d records', len(data))\n    return data\ndef filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "filter_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def filter_data(todos):\n    logging.info('Filtering data')\n    filtered_todos = [todo['title'] for todo in todos if todo['completed']]\n    logging.info('Filtered down to %d completed records', len(filtered_todos))\n    return filtered_todos\ndef insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "dags.aula_airflow.utils3",
        "description": "dags.aula_airflow.utils3",
        "peekOfCode": "def insert_data(titles, mysql_conn_id):\n    logging.info('Inserting data into MySQL database')\n    connection = BaseHook.get_connection(mysql_conn_id)\n    conn = mysql.connector.connect(\n        host=connection.host,\n        database=connection.schema,\n        user=connection.login,\n        password=connection.password,\n        port=connection.port\n    )",
        "detail": "dags.aula_airflow.utils3",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.begin() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "postgres_table = \"tb_linhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "description": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscaLinhas_toPostgres',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toPostgres",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscaLinhas",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "description": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "peekOfCode": "def GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "documentation": {}
    },
    {
        "label": "save_linhas_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "description": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "peekOfCode": "def save_linhas_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_linhas_onibus', task_ids='GetData_API_BuscaLinhas')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscaLinhas.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "description": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "description": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscaLinhas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "description": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 11, 3),\n    'retries': 0\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscaLinhas_toRaw',\n         default_args=default_args,\n         schedule_interval='@weekly',  # Executa semanalmente\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toRaw",
        "documentation": {}
    },
    {
        "label": "salva_trusted",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "def salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)\n    s3_client.download_file(bucket_origem, \"DataAPI_BuscaLinhas.csv\", '/tmp/DataAPI_BuscaLinhas.csv')",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "salva_refined",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "def salva_refined():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    caminho_trusted = '/tmp/LinhasTrusted'\n    # Carrega os arquivos Parquet salvos no trusted",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Configuração MinIO e buckets\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_origem",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "bucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "bucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "bucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscaLinhas_toTrusted_toRefined',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscaLinhas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.begin() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "postgres_table = \"tb_paradasporlinhas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscarParadasPorLinha_toPostgres',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "baixar_csv_linhas_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "def baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação\ndef autenticar(api_key):",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "def autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        return auth_response.cookies\n    else:\n        raise Exception(\"Falha na autenticação\")",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "buscar_paradas_por_linha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "def buscar_paradas_por_linha(codigo_linha, cookies):\n    search_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Parada/BuscarParadasPorLinha\"\n    response = requests.get(search_url,  params={\"codigoLinha\": codigo_linha}, cookies=cookies)\n    print(\"iniciando busca por paradas de uma linha\")\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Erro ao buscar paradas para linha {codigo_linha}: {response.text}\")\n        return []\n# Função principal para obter todas as paradas de todas as linhas e salvar em um arquivo CSV",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarParadasPorLinha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "def GetData_API_BuscarParadasPorLinha(**kwargs):\n    # Autenticação\n    cookies = autenticar(api_key)\n    # Carregar a relação de linhas a partir do CSV baixado\n    print(\"Carregando a base de linhas baixada do Minio\")\n    df_linhas = pd.read_csv(linha_csv_path)\n    # Armazenar todas as paradas de todas as linhas\n    dados_paradas = []\n    for _, linha in df_linhas.iterrows():\n        codigo_linha = linha[\"cl\"]",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "save_ParadasPorLinha_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "def save_ParadasPorLinha_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_ParadasPorLinha', task_ids='GetData_API_BuscarParadasPorLinha')\n    if data is None:\n        print(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarParadasPorLinha.csv\"\n    print(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Configurações da API e MinIO\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "bucket_name = \"raw\"\nlinha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "linha_csv_path",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "linha_csv_path = \"/tmp/linhas.csv\"  # Caminho temporário para salvar o CSV\n# Função para baixar o arquivo CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Baixa o arquivo CSV de linhas do MinIO\n    s3_client.download_file(bucket_name, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG(\n    'DataAPI_BuscarParadasPorLinha_toRaw',\n    default_args=default_args,\n    schedule_interval='@weekly',  # Executar semanalmente\n    catchup=False,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "save_trusted",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "def save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)\n    s3_client.download_file(bucket_origem, \"DataAPI_BuscarParadasPorLinha.csv\", '/tmp/DataAPI_BuscarParadasPorLinha.csv')",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "save_refined",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "def save_refined():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    Paradas_trusted = '/tmp/ParadasPorLinhasTrusted'\n    data_refined = spark.read.parquet(Paradas_trusted)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Configuração MinIO e buckets\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_origem",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "bucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "bucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "bucket_refined = 'refined'\ndef save_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscarParadasPorLinha_toTrusted_toRefined',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadasPorLinha_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.begin() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "postgres_table = \"tb_paradas\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "description": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscarParadas_toPostgres',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadas_toPostgres",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarParadas",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "peekOfCode": "def GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:\n        print(\"Falha na autenticação:\", auth_response.text)\n        return",
        "detail": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "documentation": {}
    },
    {
        "label": "save_paradas_to_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "peekOfCode": "def save_paradas_to_minio(**kwargs):\n    ti = kwargs['ti']\n    data = ti.xcom_pull(key='data_paradas', task_ids='GetData_API_BuscarParadas')\n    if data is None:\n        logger.error(\"Nenhum dado encontrado no XCom.\")\n        return\n    df = pd.DataFrame(data)\n    local_file = \"/tmp/DataAPI_BuscarParadas.csv\"\n    logger.info(f\"Salvando o DataFrame no arquivo {local_file}.\")\n    df.to_csv(local_file, index=False)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Defina sua chave de API da SPTrans\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n# Função para autenticação e busca das linhas de ônibus\ndef GetData_API_BuscarParadas(**kwargs):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    # Autenticação\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n    else:",
        "detail": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "description": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': datetime(2024, 11, 3),\n    'retries': 0\n}\n# Definir a DAG única\nwith DAG('DataAPI_BuscarParadas_toRaw',\n         default_args=default_args,\n         schedule_interval='@weekly',  # Executa semanalmente\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadas_toRaw",
        "documentation": {}
    },
    {
        "label": "salva_trusted",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "def salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)\n    s3_client.download_file(bucket_origem, \"DataAPI_BuscarParadas.csv\", '/tmp/DataAPI_BuscarParadas.csv')",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "salva_refined",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "def salva_refined():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    Paradas_trusted = '/tmp/ParadasTrusted'\n    data_refined = spark.read.parquet(Paradas_trusted)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "logger = logging.getLogger(\"airflow\")\n# Configuração MinIO e buckets\nminio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_origem",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "bucket_origem = 'raw'\nbucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "bucket_trusted = 'trusted'\nbucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "bucket_refined = 'refined'\ndef salva_trusted():\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    # Configura o cliente S3 (Minio)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Faz o download do arquivo CSV do bucket S3 (Minio)",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "description": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Criação do DAG no Airflow\nwith DAG('DataAPI_BuscarParadas_toTrusted_toRefined',\n         default_args=default_args,\n         schedule_interval=None,\n         catchup=False) as dag:",
        "detail": "dags.dag_DataAPI_BuscarParadas_toTrusted_toRefined",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.connect() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "postgres_table = \"tb_buscar_posicao\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Configuração do DAG\nwith DAG('DataAPI_BuscarPosicao_toPostgres', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    load_data_task = PythonOperator(",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toPostgres",
        "documentation": {}
    },
    {
        "label": "GetData_API_BuscarPosicao",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "def GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        response = requests.get(url, cookies=auth_response.cookies)\n        if response.status_code == 200:",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "bucket_raw = \"raw\"\n# Função para buscar a posição dos veículos e armazenar na camada raw\ndef GetData_API_BuscarPosicao(**kwargs):\n    # URL e parâmetros da API (ajuste conforme necessário)\n    url = \"http://api.olhovivo.sptrans.com.br/v2.1/Posicao\"\n    api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\n    # Autenticação e coleta de dados\n    auth_response = requests.post(\"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\", params={\"token\": api_key})\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('DataAPI_BuscarPosicao_toRaw', default_args=default_args, \n         schedule_interval='*/2 * * * *',  # Executa a cada 15 minutos\n         catchup=False) as dag:\n    fetch_task = PythonOperator(\n        task_id='GetData_API_BuscarPosicao',",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRaw",
        "documentation": {}
    },
    {
        "label": "save_BuscarPosicao_toRefined",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "def save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"veiculos-posicao/\")\n    for obj in arquivos.get('Contents', []):\n        arquivo_trusted = obj['Key']\n        ano, mes, dia, nome_arquivo = arquivo_trusted.split('/')[-4:]",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "bucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"veiculos-posicao/\")",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "bucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPosicao_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"veiculos-posicao/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "description": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Configuração do DAG\nwith DAG('DataAPI_BuscarPosicao_toRefined', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    move_data_task = PythonOperator(",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toRefined",
        "documentation": {}
    },
    {
        "label": "save_BuscarPosicao_toTrusted",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "def save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"veiculos-posicao/\")\n    for obj in arquivos.get('Contents', []):\n        try:\n            arquivo_raw = obj['Key']",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "bucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"veiculos-posicao/\")",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "bucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPosicao_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"veiculos-posicao/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\n# Configuração do DAG\nwith DAG('DataAPI_BuscarPosicao_toTrusted', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    process_data_task = PythonOperator(",
        "detail": "dags.dag_DataAPI_BuscarPosicao_toTrusted",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.connect() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "postgres_table = \"tb_buscar_previsao_linha\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('DataAPI_BuscarPrevisaoLinha_toPostgres', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    load_data_task = PythonOperator(\n        task_id='save_BuscarPrevisaoLinha_toPostgres',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toPostgres",
        "documentation": {}
    },
    {
        "label": "baixar_csv_linhas_minio",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "def baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação\ndef autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "autenticar",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "def autenticar(api_key):\n    auth_url = \"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar\"\n    params = {\"token\": api_key}\n    auth_response = requests.post(auth_url, params=params)\n    if auth_response.status_code == 200 and auth_response.text == 'true':\n        print(\"Autenticação bem-sucedida!\")\n        return auth_response.cookies\n    else:\n        raise Exception(\"Falha na autenticação\")\n# Função principal para obter previsões de chegada para cada linha com re-autenticação em caso de falha",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "GetData_API_PrevisaoLinha",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "def GetData_API_PrevisaoLinha(**kwargs):\n    # Tenta autenticar inicialmente\n    cookies = autenticar(api_key)\n    # Carregar a relação de linhas a partir do CSV baixado\n    print(\"Carregando a base de linhas baixada do Minio\")\n    df_linhas = pd.read_csv(linha_csv_path)\n    # Lista para consolidar os dados\n    consolidated_data = []\n    # Iterar sobre cada linha e buscar previsões\n    for _, linha in df_linhas.iterrows():",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "bucket_raw = \"raw\"\napi_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "api_key = \"9aa2fcbfb81e92aaf26c640c539848fa69193acd16d9784ec862d1d42b29d28c\"\nlinha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "linha_csv_path",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "linha_csv_path = \"/tmp/DataAPI_BuscaLinhas.csv\"\n# Função para baixar o CSV de linhas do MinIO\ndef baixar_csv_linhas_minio():\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    s3_client.download_file(bucket_raw, \"DataAPI_BuscaLinhas.csv\", linha_csv_path)\n    print(\"Arquivo CSV de linhas baixado com sucesso.\")\n# Função de autenticação",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('DataAPI_BuscarPrevisaoLinha_toRaw', default_args=default_args, \n         schedule_interval='*/2 * * * *',  # Executa a cada 15 minutos\n         catchup=False) as dag:\n    task_baixar_csv_linhas = PythonOperator(\n        task_id='baixar_csv_linhas_minio',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRaw",
        "documentation": {}
    },
    {
        "label": "save_BuscarPrevisaoLinha_toRefined",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "def save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"previsao-linha/\")\n    for obj in arquivos.get('Contents', []):\n        arquivo_trusted = obj['Key']\n        ano, mes, dia, nome_arquivo = arquivo_trusted.split('/')[-4:]",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "bucket_trusted = \"trusted\"\nbucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"previsao-linha/\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "bucket_refined = \"refined\"\n# Função para processar arquivos da trusted para refined\ndef save_BuscarPrevisaoLinha_toRefined(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"previsao-linha/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('DataAPI_BuscarPrevisaoLinha_toRefined', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    move_data_task = PythonOperator(\n        task_id='save_BuscarPrevisaoLinha_toRefined',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toRefined",
        "documentation": {}
    },
    {
        "label": "save_BuscarPrevisaoLinha_toTrusted",
        "kind": 2,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "def save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"previsao-linha/\")\n    for obj in arquivos.get('Contents', []):\n        arquivo_raw = obj['Key']\n        ano, mes, dia, nome_arquivo = arquivo_raw.split('/')[-4:]",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "bucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"previsao-linha/\")",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "bucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_BuscarPrevisaoLinha_toTrusted(**kwargs):\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"previsao-linha/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "description": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('DataAPI_BuscarPrevisaoLinha_toTrusted', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    process_data_task = PythonOperator(\n        task_id='save_BuscarPrevisaoLinha_toTrusted',",
        "detail": "dags.dag_DataAPI_BuscarPrevisaoLinha_toTrusted",
        "documentation": {}
    },
    {
        "label": "save_refined_to_postgres",
        "kind": 2,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "def save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem\n    with engine.begin() as conn:\n        conn.execute(text(f\"CREATE SCHEMA IF NOT EXISTS {postgres_schema};\"))",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "bucket_refined = \"refined\"\n# Configurações do PostgreSQL\npostgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_host",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_host = \"host.docker.internal\"\npostgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_port",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_port = \"5432\"\npostgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_db",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_db = \"postgres\"\npostgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_user",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_user = \"airflow\"\npostgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_password",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_password = \"airflow\"\npostgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_schema",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_schema = \"dados_no_ponto\"\npostgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "postgres_table",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "postgres_table = \"tb_pass_transportados\"\n# Função para salvar os arquivos Parquet no PostgreSQL\ndef save_refined_to_postgres(**kwargs):\n    # Conectar ao MinIO e ao PostgreSQL\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    engine = create_engine(f\"postgresql://{postgres_user}:{postgres_password}@{postgres_host}:{postgres_port}/{postgres_db}\")\n    # Criar schema e tabela se não existirem",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toPostgres",
        "description": "dags.dag_StaticData_PassTransportados_toPostgres",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('StaticData_PassTransportados_toPostgres', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    load_data_task = PythonOperator(\n        task_id='save_PassTransportados_toPostgres',",
        "detail": "dags.dag_StaticData_PassTransportados_toPostgres",
        "documentation": {}
    },
    {
        "label": "download_all_xls_files",
        "kind": 2,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "def download_all_xls_files(**kwargs):\n    # Configurar cliente MinIO (S3)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Gerar a lista de arquivos com nome e caminho corretos\n    filenames = [\n        f\"Consolidado {num_mes}-{mes}-{ano}.xls\"\n        for ano in range(2024, 2025)",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://raw.githubusercontent.com/pri-pereiras/Eng-Dados/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://raw.githubusercontent.com/pri-pereiras/Eng-Dados/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://raw.githubusercontent.com/pri-pereiras/Eng-Dados/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "bucket_name",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "bucket_name = \"raw\"\n# URL base dos arquivos brutos no GitHub\nraw_base_url = \"https://raw.githubusercontent.com/pri-pereiras/Eng-Dados/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\ndef download_all_xls_files(**kwargs):",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "raw_base_url",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "raw_base_url = \"https://raw.githubusercontent.com/pri-pereiras/Eng-Dados/main/airflow/data/Passageiros-Transportados\"\n# Mapeamento de meses com o número correspondente para os nomes de arquivos\nmeses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\ndef download_all_xls_files(**kwargs):\n    # Configurar cliente MinIO (S3)\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "meses_portugues",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "meses_portugues = {\n    \"01\": \"Janeiro\", \"02\": \"Fevereiro\", \"03\": \"Março\", \"04\": \"Abril\",\n    \"05\": \"Maio\", \"06\": \"Junho\", \"07\": \"Julho\", \"08\": \"Agosto\",\n    \"09\": \"Setembro\", \"10\": \"Outubro\", \"11\": \"Novembro\", \"12\": \"Dezembro\"\n}\ndef download_all_xls_files(**kwargs):\n    # Configurar cliente MinIO (S3)\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRaw",
        "description": "dags.dag_StaticData_PassTransportados_toRaw",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('StaticData_PassTransportados_toRaw', default_args=default_args, \n         schedule_interval='@monthly',  # Executa mensalmente\n         catchup=False) as dag:\n    task_download_files = PythonOperator(\n        task_id='download_xls_files',",
        "detail": "dags.dag_StaticData_PassTransportados_toRaw",
        "documentation": {}
    },
    {
        "label": "save_PassTransportados_toRefined",
        "kind": 2,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "def save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_trusted, Prefix=\"transporte-passageiros/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\nbucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\nbucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\nbucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "bucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\nbucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "bucket_trusted = \"trusted\"\nbucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "bucket_refined",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "bucket_refined = 'refined'\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toRefined(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket trusted",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toRefined",
        "description": "dags.dag_StaticData_PassTransportados_toRefined",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('StaticData_PassTransportados_toRefined', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    process_data_task = PythonOperator(\n        task_id='save_passTransportados_toRefined',",
        "detail": "dags.dag_StaticData_PassTransportados_toRefined",
        "documentation": {}
    },
    {
        "label": "save_PassTransportados_toTrusted",
        "kind": 2,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "def save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw\n    arquivos = s3_client.list_objects_v2(Bucket=bucket_raw, Prefix=\"transporte-passageiros/\")\n    for obj in arquivos.get('Contents', []):",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_endpoint",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "minio_endpoint = \"http://host.docker.internal:9050\"\nminio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_access_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "minio_access_key = \"datalake\"\nminio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "minio_secret_key",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "minio_secret_key = \"datalake\"\nbucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_raw",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "bucket_raw = \"raw\"\nbucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "bucket_trusted",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "bucket_trusted = \"trusted\"\n# Função para verificar e processar arquivos\ndef save_PassTransportados_toTrusted(**kwargs):\n    # Inicializa a sessão do Spark dentro da função\n    spark = SparkSession.builder.getOrCreate()\n    s3_client = boto3.client('s3',\n                             endpoint_url=minio_endpoint,\n                             aws_access_key_id=minio_access_key,\n                             aws_secret_access_key=minio_secret_key)\n    # Listar arquivos no bucket raw",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    },
    {
        "label": "default_args",
        "kind": 5,
        "importPath": "dags.dag_StaticData_PassTransportados_toTrusted",
        "description": "dags.dag_StaticData_PassTransportados_toTrusted",
        "peekOfCode": "default_args = {\n    'owner': 'airflow',\n    'start_date': days_ago(1),\n    'retries': 0,\n}\nwith DAG('StaticData_PassTransportados_toTrusted', default_args=default_args, \n         schedule_interval=None,\n         catchup=False) as dag:\n    process_data_task = PythonOperator(\n        task_id='save_passTransportados_toTrusted',",
        "detail": "dags.dag_StaticData_PassTransportados_toTrusted",
        "documentation": {}
    }
]